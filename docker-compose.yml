<<<<<<< HEAD
=======
version: '3.8'

>>>>>>> a293d76a25d58fb62d19e65bdd1b76ac1f92656b
services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
<<<<<<< HEAD
    container_name: transport-postgres
=======
    container_name: transport_db
>>>>>>> a293d76a25d58fb62d19e65bdd1b76ac1f92656b
    environment:
      POSTGRES_DB: transport_db
      POSTGRES_USER: transport_user
      POSTGRES_PASSWORD: transport_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Smart-Public-Transport-Ticketing-System/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transport_user -d transport_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transport_network

<<<<<<< HEAD
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: transport-zookeeper
=======
  # Passenger Service
  passenger-service:
    build:
      context: ./Smart-Public-Transport-Ticketing-System/PassengerService
      dockerfile: Dockerfile
    container_name: passenger_service
>>>>>>> a293d76a25d58fb62d19e65bdd1b76ac1f92656b
    environment:
      - dbHost=postgres
      - dbPort=5432
      - dbName=transport_db
      - dbUser=transport_user
      - dbPassword=transport_pass
    ports:
<<<<<<< HEAD
      - "2181:2181"
    networks:
      - transport_network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: transport-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - transport_network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: transport-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: transport-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - transport_network

  # Notification Service
  notification-service:
    build:
      context: ./Smart-Public-Transport-Ticketing-System/NotificationService
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - dbHost=postgres
      - dbPort=5432
      - dbName=transport_db
      - dbUser=transport_user
      - dbPassword=transport_pass
      - kafkaHost=kafka
      - kafkaPort=9092
    ports:
      - "9005:8084"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - transport_network
=======
      - "9001:9001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - transport_network
>>>>>>> a293d76a25d58fb62d19e65bdd1b76ac1f92656b

volumes:
  postgres_data:

networks:
  transport_network:
<<<<<<< HEAD
    driver: bridge
=======
    driver: bridge
>>>>>>> a293d76a25d58fb62d19e65bdd1b76ac1f92656b
